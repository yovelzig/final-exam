pipeline {
    agent any
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKER_REGISTRY = 'yovelzig'
        REPO_NAME = 'final-exam'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
    }
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'dev', url: 'https://github.com/yovelzig/final-exam.git'
                // sh 'git checkout dev'
                sh 'pwd'
                sh 'ls'
                sh 'ls ./final-exam/docker'
                sh 'echo "see what here"'
                sh 'ls ./docker/aws-flask-app'
                
                
            }
        }
        
        stage('install Lint & Security Scan') {
            steps {
                sh 'echo "ShellCheck would run here if there were shell scripts"'
                // sh 'ls -l'
                // sh 'pip install flake8 bandit'
            }
        }

        stage('Parallel Lint & Security Scan') {
            steps {
                parallel(
                    Lint: {
                        sh 'echo "flake8 . || true"'
                    },
                    Security: {
                        sh 'echo "bandit -r . || true"'
                    }
                )
            }
        }

        stage('Install Dependencies') {
            steps {
                dir('docker/aws-flask-app/'){
                    sh 'ls'
                    sh 'echo "pip install -r src/requirements.txt"'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                dir('docker/aws-flask-app/'){
                    sh 'pwd'
                    sh 'ls'    
                    sh "docker build -t $DOCKER_REGISTRY/$REPO_NAME:$IMAGE_TAG -f Dockerfile ."
                    sh "docker tag $DOCKER_REGISTRY/$REPO_NAME:$IMAGE_TAG $DOCKER_REGISTRY/$REPO_NAME:latest"
            }
          } 
        }
        

        
        stage('Push to Docker Hub') {
            steps {
                sh "echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin"
                sh "docker push $DOCKER_REGISTRY/$REPO_NAME:$IMAGE_TAG"
                sh "docker push $DOCKER_REGISTRY/$REPO_NAME:latest"
            }
        }
        
    }
}